- name: Deploy AWS infra
  hosts: localhost
  gather_facts: no

  vars:
    prefix: "discord-prod"

  tasks:
    - name: Create log groups
      aws_log_group:
        name: "{{ item }}"
      with_items:
        - "{{ prefix }}-bot"
        - "{{ prefix }}-archiver"

    - name: Create role for alarms to Discord lambda
      iam_role:
        state: present
        name: "{{ prefix }}-alarms-to-discord-lambda-role"
        assume_role_policy_document: "{{ lookup('template', 'alarms-to-discord-lambda-assume-role-policy.json') }}"
      register: lambda_role_out

    - name: Create alarms to Discord lambda
      aws_lambda:
        name: "{{ prefix }}-alarms-to-discord-lambda"
        path: "../alarms-to-discord"
        role: "{{ lambda_role_out.iam_role.arn }}"
        handler: "alarms-to-discord.handler"
        runtime: "nodejs8.10"
        env:
          DISCORD_WEBHOOK_URL: "{{ secrets.error_channel_webhook }}"
      register: lambda_out

    - include: errors-to-discord.yml

    - name: Create SNS topic for alarms
      fixed_sns_topic:
        state: present
        name: "{{ prefix }}-alarms-sns-topic"
        subscriptions:
          - endpoint: "{{ lambda_out.Configuration.FunctionArn }}"
            protocol: lambda
        purge_subscriptions: no
      register: sns_topic_out

    - name: Create metric for osu! API request times
      aws_metric_filter:
        filterName: "{{ prefix }}-osuapi-latency-filter"
        logGroupName: "{{ prefix }}-bot"
        filterPattern: "[date, time, level, module = PERFORMANCE, name = \"osu! API\", ms, call]"
        metricName: "{{ prefix }}-performance-osuapi"
        metricNamespace: "General"
        metricValue: "$ms"

    # TODO: Write this into proper module
    - name: Give SNS permission to trigger the function
      shell: "aws lambda add-permission --function-name {{ prefix }}-alarms-to-discord-lambda --statement-id {{ prefix }}-alarms-to-discord-lambda-statement --action lambda:InvokeFunction --principal sns.amazonaws.com"
      ignore_errors: yes

    - name: Create alarm for bot log silence
      ec2_metric_alarm:
        state: present
        description: "Alarm triggered when there are no new log events in '{{ prefix }}-bot' log"
        name: "{{ prefix }}-bot-IncomingLogEvents-silence-alarm"
        namespace: "AWS/Logs"
        metric: "IncomingLogEvents"
        statistic: "Sum"
        comparison: "<="
        threshold: 0
        period: 60
        evaluation_periods: 1
        dimensions:
          LogGroupName: "{{ prefix }}-bot"
        alarm_actions:
          - "{{ sns_topic_out.sns_arn }}"

    - name: Create metric for errors logged
      aws_metric_filter:
        filterName: "{{ item }}-errors-logged-filter"
        logGroupName: "{{ item }}"
        filterPattern: "[date, time, level = ERROR, ...]"
        metricNamespace: "General"
        metricName: "{{ item }}-errors-logged"
        metricValue: "1"
      with_items:
        - "{{ prefix }}-bot"
        - "{{ prefix }}-archiver"

    - name: Create alarm for errors logged
      ec2_metric_alarm:
        state: present
        description: "Alarm triggered when there are log events with ERROR level in '{{ item }}' log"
        name: "{{ item }}-errors-logged-alarm"
        namespace: "General"
        metric: "{{ item }}-errors-logged"
        statistic: "Sum"
        comparison: ">="
        threshold: 1
        period: 60
        evaluation_periods: 1
        alarm_actions:
          - "{{ sns_topic_out.sns_arn }}"
      with_items:
        - "{{ prefix }}-bot"
        - "{{ prefix }}-archiver"

- name: Create server
  hosts: localhost
  gather_facts: no

  vars:
    droplet_name: lemon-bot
    droplet_size: s-1vcpu-1gb
    droplet_region: fra1 # Frankfurt 1
    droplet_image: ubuntu-16-04-x64
    ssh_key_name: lemon-bot

  tasks:
    - name: Add SSH key to DigitalOcean
      digital_ocean:
        api_token: "{{ secrets.digital_ocean_api_token }}"
        command: ssh
        name: "{{ ssh_key_name }}"
        ssh_pub_key: "{{ ssh_key.public }}"
      register: do_ssh_key

    - name: Create droplet
      digital_ocean:
        api_token: "{{ secrets.digital_ocean_api_token }}"
        command: droplet
        name: "{{ droplet_name }}"
        unique_name: yes
        size_id: "{{ droplet_size }}"
        region_id: "{{ droplet_region }}"
        image_id: "{{ droplet_image }}"
        ssh_key_ids: "{{ do_ssh_key.ssh_key.id }}"
        monitoring: yes
        backups_enabled: yes
      register: droplet

    - name: Add new droplet to host group
      add_host:
        hostname: "{{ droplet.droplet.ip_address }}"
        groupname: server
      changed_when: False

- include: provision.yml
