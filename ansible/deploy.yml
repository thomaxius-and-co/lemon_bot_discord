- name: Deploy AWS infra
  hosts: localhost
  gather_facts: no

  vars:
    prefix: "discord-prod"

  tasks:
    - name: Create log groups
      aws_log_group:
        name: "{{ item }}"
      with_items:
        - "{{ prefix }}-bot"
        - "{{ prefix }}-archiver"

    - name: Create role for alarms to Discord lambda
      iam_role:
        state: present
        name: "{{ prefix }}-alarms-to-discord-lambda-role"
        assume_role_policy_document: "{{ lookup('template', 'alarms-to-discord-lambda-assume-role-policy.json') }}"
        purge_policies: yes
      register: lambda_role_out

    - name: Give the Lambda permissions to write logs and read Discord webhook
      iam_policy:
        state: present
        iam_type: role
        iam_name: "{{ prefix }}-alarms-to-discord-lambda-role"
        policy_name: "{{ prefix }}-alarms-to-discord-lambda-role-policy"
        skip_duplicates: no
        policy_json: >
          {
            "Version": "2012-10-17",
            "Statement": [{
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": "arn:aws:logs:*:*:*"
            }, {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:DescribeSecret"
              ],
              "Resource": "{{ discord_alarm_webhook_secret_arn }}"
            }, {
              "Effect": "Allow",
              "Action": [
                "secretsmanager:GetSecretValue"
              ],
              "Resource": "{{ discord_alarm_webhook_secret_arn }}",
              "Condition": {
                "ForAnyValue:StringEquals": {
                  "secretsmanager:VersionStage": "AWSCURRENT"
                }
              }
            }]
          }

    - name: Create alarms to Discord lambda
      lemon_aws_lambda:
        name: "{{ prefix }}-alarms-to-discord-lambda"
        path: "../alarms-to-discord"
        role: "{{ lambda_role_out.iam_role.arn }}"
        handler: "alarms-to-discord.handler"
        runtime: "nodejs14.x"
      register: lambda_out

    - include: errors-to-discord.yml

    - name: Create SNS topic for alarms
      community.aws.sns_topic:
        state: present
        name: "{{ prefix }}-alarms-sns-topic"
        subscriptions:
          - endpoint: "{{ lambda_out.Configuration.FunctionArn }}"
            protocol: lambda
        purge_subscriptions: no
      register: sns_topic_out

    - name: Create metric for osu! API request times
      aws_metric_filter:
        filterName: "{{ prefix }}-osuapi-latency-filter"
        logGroupName: "{{ prefix }}-bot"
        filterPattern: "[date, time, level, module = PERFORMANCE, name = \"osu! API\", ms, call]"
        metricName: "{{ prefix }}-performance-osuapi"
        metricNamespace: "General"
        metricValue: "$ms"

    # TODO: Write this into proper module
    - name: Give SNS permission to trigger the function
      shell: "aws lambda add-permission --function-name {{ prefix }}-alarms-to-discord-lambda --statement-id {{ prefix }}-alarms-to-discord-lambda-statement --action lambda:InvokeFunction --principal sns.amazonaws.com"
      ignore_errors: yes

    - name: Create alarm for bot log silence
      ec2_metric_alarm:
        state: present
        description: "Alarm triggered when there are no new log events in '{{ prefix }}-bot' log"
        name: "{{ prefix }}-bot-IncomingLogEvents-silence-alarm"
        namespace: "AWS/Logs"
        metric: "IncomingLogEvents"
        statistic: "Sum"
        comparison: "LessThanOrEqualToThreshold"
        threshold: 0
        period: 60
        evaluation_periods: 1
        dimensions:
          LogGroupName: "{{ prefix }}-bot"
        alarm_actions:
          - "{{ sns_topic_out.sns_arn }}"
        insufficient_data_actions:
          - "{{ sns_topic_out.sns_arn }}"
        ok_actions:
          - "{{ sns_topic_out.sns_arn }}"
