- name: Configure server
  hosts: server
  remote_user: root
  become: yes
  gather_facts: no

  vars:
    app_name: lemon
    prefix: "discord-prod"

  pre_tasks:
    - name: Install python on remote machine
      raw: test -e /usr/bin/python3 || (apt -y update && apt install -y python3-minimal)
      changed_when: False
    - setup:

  tasks:
    - include: deployment_dependencies.yml
    - include: unattended_upgrades.yml
    - include: python.yml

    - name: Create group
      group:
        name: "{{ app_name }}"

    - name: Create user
      user:
        name: "{{ app_name }}"

    - name: Set open file limit
      template:
        src: "templates/99-sysctl.conf.j2"
        dest: "/etc/sysctl.d/99-sysctl.conf"
      notify:
        - reload sysctl.conf

    #- include: postgres.yml
    #  vars:
    #    postgres_listen_addresses_string: 'localhost, 10.200.200.1'
    #    postgres_allowed_ips:
    #      - 10.200.200.1/24
    #- include: redis.yml

    - name: Install required packages
      apt:
        update_cache: yes
        package:
          - libpq-dev
          - libxml2-dev # for lxml
          - libxslt1-dev # for lxml
          - zlib1g-dev # for lxml

    - name: Install pipenv
      shell: "{{ python_bin }} -m pip install pipenv==2021.11.5.post0"

    - copy:
        src: "../{{ item }}"
        dest: "/home/{{ app_name }}/{{ item }}"
        owner: "{{ app_name }}"
        group: "{{ app_name }}"
      with_items:
        - Pipfile
        - Pipfile.lock

    - name: Install Python dependencies
      shell: "{{ python_bin }} -m pipenv install --deploy"
      become: yes
      become_user: "{{ app_name }}"
      args:
        chdir: "/home/{{ app_name }}"
      notify:
        - restart services

    - name: Copy source to server
      synchronize:
        src: ../src
        dest: "/home/{{ app_name }}"
        delete: yes
        #rsync_opts:
        #  - "--usermap=*:{{ app_name }}"
      notify:
        - restart services

    - name: Create services
      template:
        src: "templates/{{ item.template }}.service.j2"
        dest: "/etc/systemd/system/{{ item.service }}.service"
      with_items:
        - template: systemd
          service: "{{ app_name }}"
      notify:
        - reload unit files
        - restart services

    - name: enable and start service
      service:
        name: "{{ app_name }}"
        state: started
        enabled: yes

    #- include: nodejs.yml
    - include: web.yml
    #- include: letsencrypt.yml

  handlers:
    - name: reload sysctl.conf
      shell: sysctl -p

    - name: reload unit files
      shell: systemctl daemon-reload

    - name: reload nginx config
      service:
        name: nginx
        state: reloaded

    - name: restart services
      service:
        name: "{{ item }}"
        state: restarted
      with_items:
        - "{{ app_name }}"

    - name: restart web service
      service:
        name: "{{ app_name }}-web"
        state: restarted
